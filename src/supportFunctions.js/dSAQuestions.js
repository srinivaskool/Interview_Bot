const dsaQuestionsArray = [
    "Given an array (or string), the task is to reverse the array/string.\nExamples :\n\nInput  : arr[] = {1, 2, 3}\nOutput : arr[] = {3, 2, 1}\n\nInput :  arr[] = {4, 5, 1, 2}\nOutput : arr[] = {2, 1, 5, 4}",
    "Given an array arr[] and an integer K where K is smaller than size of array, the task is to find the Kth smallest element in the given array. It is given that all array elements are distinct.\n\nNote :-  l and r denotes the starting and ending index of the array.\n\nExample 1:\n\nInput:\nN = 6\narr[] = 7 10 4 3 20 15\nK = 3\nOutput : 7\nExplanation :\n3rd smallest element in the given array is 7.",
    "Given an array of size N containing only 0s, 1s, and 2s; sort the array in ascending order.\n\nExample 1:\n\nInput: N = 5\narr[]= {0 2 1 2 0}\nOutput: 0 0 1 2 2\nExplanation:\n0s 1s and 2s are segregated into ascending order.",
    "An array contains both positive and negative numbers in random order. Rearrange the array elements so that all negative numbers appear before all positive numbers.\n\nExamples :\n\nInput: -12, 11, -13, -5, 6, -7, 5, -3, -6\nOutput: -12 -13 -5 -7 -3 -6 11 6 5\nNote: Order of elements is not important here.",
    "Given an array of size N. The task is to find the maximum and the minimum element of the array using the minimum number of comparisons.\n\nExamples:\n\nInput: arr[] = {3, 5, 4, 1, 9}\nOutput: Minimum element is: 1\n              Maximum element is: 9\n\nInput: arr[] = {22, 14, 8, 17, 35, 3}\nOutput:  Minimum element is: 3\n Maximum element is: 35",
    "Given two arrays a[] and b[] of size n and m respectively. The task is to find the number of elements in the union between these two arrays.\n\nUnion of the two arrays can be defined as the set containing distinct elements from both the arrays. If there are repetitions, then only one occurrence of element should be printed in the union.\n\nNote : Elements are not necessarily distinct.",
    "Given an array, rotate the array by one position in clock-wise direction.\n\nExample 1:\n\nInput:\nN = 5\nA[] = {1, 2, 3, 4, 5}\nOutput:\n5 1 2 3 4",
    "Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.\n\nExample 1:\n\nInput:\nN = 5\nArr[] = {1,2,3,-2,5}\nOutput:\n9\nExplanation:\nMax subarray sum is 9\nof elements (1, 2, 3, -2, 5) which\nis a contiguous subarray.",
    "Given an array arr[] denoting heights of N towers and a positive integer K.\n\nFor each tower, you must perform exactly one of the following operations exactly once.\n\nIncrease the height of the tower by K\nDecrease the height of the tower by K\nFind out the minimum possible difference between the height of the shortest and tallest towers after you have modified each tower.\n\nYou can find a slight modification of the problem here.\nNote: It is compulsory to increase or decrease the height by K for each tower. After the operation, the resultant array should not contain any negative integers.\n\nExample 1:\n\nInput:\nK = 2, N = 4\nArr[] = {1, 5, 8, 10}\nOutput:\n5\nExplanation:\nThe array can be modified as\n{1+k, 5-k, 8-k, 10-k} = {3, 3, 6, 8}.\nThe difference between\nthe largest and the smallest is 8-3 = 5.\nExample 2:\n\nInput:\nK = 3, N = 5\nArr[] = {3, 9, 12, 16, 20}\nOutput:\n11\nExplanation:\nThe array can be modified as\n{3+k, 9+k, 12-k, 16-k, 20-k} -> {6, 12, 9, 13, 17}.\nThe difference between\nthe largest and the smallest is 17-6 = 11.",
    "Given an array of N integers arr[] where each element represents the maximum length of the jump that can be made forward from that element. This means if arr[i] = x, then we can jump any distance y such that y â‰¤ x.\nFind the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.\n\nNote: Return -1 if you can't reach the end of the array.\n\nExample 1:\n\nInput:\nN = 11\narr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9}\nOutput: 3\nExplanation:\nFirst jump from 1st element to 2nd\nelement with value 3. Now, from here\nwe jump to 5th element with value 9,\nand from here we will jump to the last.\nExample 2:\n\nInput :\nN = 6\narr = {1, 4, 3, 2, 6, 7}\nOutput: 2\nExplanation:\nFirst we jump from the 1st to 2nd element\nand then jump to the last element.",
    "Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\n\nThere is only one repeated number in nums, return this repeated number.\n\nYou must solve the problem without modifying the array nums and uses only constant extra space.\n\nExample 1:\n\nInput: nums = [1,3,4,2,2]\nOutput: 2\nExample 2:\n\nInput: nums = [3,1,3,4,2]\nOutput: 3\n\nConstraints:\n\n1 <= n <= 105\nnums.length == n + 1\n1 <= nums[i] <= n\nAll the integers in nums appear only once except for precisely one integer which appears two or more times.",
    "Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.\n\nExample 1:\n\nInput:\nN = 5\nArr[] = {1,2,3,-2,5}\nOutput:\n9\nExplanation:\nMax subarray sum is 9\nof elements (1, 2, 3, -2, 5) which\nis a contiguous subarray.\nExample 2:\n\nInput:\nN = 4\nArr[] = {-1,-2,-3,-4}\nOutput:\n-1\nExplanation:\nMax subarray sum is -1\nof element (-1)",
    "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n\nExample 1:\n\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\nExample 2:\n\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n\nConstraints:\n\n1 <= intervals.length <= 104\nintervals[i].length == 2\n0 <= starti <= endi <= 104",
    "A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n\nFor example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such an arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n\nFor example, the next permutation of arr = [1,2,3] is [1,3,2].\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographically larger rearrangement.\nGiven an array of integers nums, find the next permutation of nums.\n\nThe replacement must be in place and use only constant extra memory.\n\nExample 1:\n\nInput: nums = [1,2,3]\nOutput: [1,3,2]\nExample 2:\n\nInput: nums = [3,2,1]\nOutput: [1,2,3]\nExample 3:\n\nInput: nums = [1,1,5]\nOutput: [1,5,1]\n\nConstraints:\n\n1 <= nums.length <= 100\n0 <= nums[i] <= 100",
    "Given an array of integers. Find the Inversion Count in the array.\n\nInversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.\n\nExample 1:\n\nInput: N = 5, arr[] = {2, 4, 1, 3, 5}\nOutput: 3\nExplanation: The sequence 2, 4, 1, 3, 5\nhas three inversions (2, 1), (4, 1), (4, 3).\nExample 2:\n\nInput: N = 5 arr[] = {2, 3, 4, 5, 6}\nOutput: 0\nExplanation: As the sequence is already\nsorted so there is no inversion count.\nExample 3:\n\nInput: N = 3, arr[] = {10, 10, 10}\nOutput: 0\nExplanation: As all the elements of array\nare the same, so there is no inversion count.",
    "You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\nExample 1:\n\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\nExample 2:\n\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n\nConstraints:\n\n1 <= prices.length <= 105\n0 <= prices[i] <= 104",
    "Given an array of N integers, and an integer K, find the number of pairs of elements in the array whose sum is equal to K.\n\nExample 1:\n\nInput:\nN = 4, K = 6\narr[] = {1, 5, 7, 1}\nOutput: 2\nExplanation:\narr[0] + arr[1] = 1 + 5 = 6\nand arr[1] + arr[3] = 5 + 1 = 6.\nExample 2:\n\nInput:\nN = 4, K = 2\narr[] = {1, 1, 1, 1}\nOutput: 6\nExplanation:\nEach 1 will produce sum 2 with any 1.",
    "Given three arrays sorted in increasing order. Find the elements that are common in all three arrays.\nNote: can you take care of the duplicates without using any additional Data Structure?\n\nExample 1:\n\nInput:\nn1 = 6; A = {1, 5, 10, 20, 40, 80}\nn2 = 5; B = {6, 7, 20, 80, 100}\nn3 = 8; C = {3, 4, 15, 20, 30, 70, 80, 120}\nOutput: 20 80\nExplanation: 20 and 80 are the only common elements in A, B, and C.\n\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function commonElements() which takes the 3 arrays A[], B[], C[] and their respective sizes n1, n2, and n3 as inputs and returns an array containing the common element present in all the 3 arrays in sorted order.\nIf there are no such elements return an empty array. In this case, the output will be printed as -1.\n\nExpected Time Complexity: O(n1 + n2 + n3)\nExpected Auxiliary Space: O(n1 + n2 + n3)\n\nConstraints:\n1 <= n1, n2, n3 <= 10^5\nThe array elements can be both positive or negative integers.",
    "Given an array of positive and negative numbers, arrange them in an alternate fashion such that every positive number is followed by a negative and vice-versa maintaining the order of appearance. The number of positive and negative numbers need not be equal. If there are more positive numbers they appear at the end of the array. If there are more negative numbers, they too appear at the end of the array.\n\nExamples:\n\nInput:  arr[] = {1, 2, 3, -4, -1, 4}\nOutput: arr[] = {-4, 1, -1, 2, 3, 4}\n\nInput:  arr[] = {-5, -2, 5, 2, 4, 7, 1, 8, 0, -8}\nOutput: arr[] = {-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}",
    "Given an array of positive and negative numbers. Find if there is a subarray (of size at least one) with 0 sum.\n\nExample 1:\n\nInput:\n5\n4 2 -3 1 6\n\nOutput:\nYes\n\nExplanation:\n2, -3, 1 is the subarray\nwith sum 0.\nExample 2:\n\nInput:\n5\n4 2 0 1 6\n\nOutput:\nYes\n\nExplanation:\n0 is one of the elements\nin the array so there exists a\nsubarray with sum 0.",
    "Given an integer N, find its factorial. Return a list of integers denoting the digits that make up the factorial of N.\n\nExample 1:\n\nInput: N = 5\nOutput: 120\nExplanation : 5! = 1*2*3*4*5 = 120\nExample 2:\n\nInput: N = 10\nOutput: 3628800\nExplanation :\n10! = 1*2*3*4*5*6*7*8*9*10 = 3628800",
    "Given an array Arr[] that contains N integers (may be positive, negative or zero). Find the product of the maximum product subarray.\n\nExample 1:\n\nInput:\nN = 5\nArr[] = {6, -3, -10, 0, 2}\nOutput: 180\nExplanation: Subarray with maximum product\nis [6, -3, -10] which gives product as 180.\nExample 2:\n\nInput:\nN = 6\nArr[] = {2, 3, 4, 5, -1, 0}\nOutput: 120\nExplanation: Subarray with maximum product\nis [2, 3, 4, 5] which gives product as 120.",
    "Given an array of positive integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.\n\nExample 1:\n\nInput:\nN = 7\na[] = {2,6,1,9,4,5,3}\nOutput:\n6\nExplanation:\nThe consecutive numbers here\nare 1, 2, 3, 4, 5, 6. These 6\nnumbers form the longest consecutive\nsubsequence.\nExample 2:\n\nInput:\nN = 7\na[] = {1,9,3,10,4,20,2}\nOutput:\n4\nExplanation:\n1, 2, 3, 4 is the longest\nconsecutive subsequence.",
    "Given an array of size n and an integer k, find all elements in the array that appear more than n/k times.\n\nExamples:\n\nInput: arr[] = {3, 1, 2, 2, 1, 2, 3, 3}, k = 4\nOutput: {2, 3}\nExplanation: Here n/k is 8/4 = 2, therefore 2 appears 3 times in the array that is greater than 2 and 3 appears 3 times in the array that is greater than 2\n\nInput: arr[] = {9, 8, 7, 9, 2, 9, 7}, k = 3\nOutput: {9}\nExplanation: Here n/k is 7/3 = 2, therefore 9 appears 3 times in the array that is greater than 2.",
    "In daily share trading, a buyer buys shares in the morning and sells them on the same day. If the trader is allowed to make at most 2 transactions in a day, the second transaction can only start after the first one is complete (Buy->sell->Buy->sell). Given stock prices throughout the day, find out the maximum profit that a share trader could have made.\n\nExamples:\n\nInput: price[] = {10, 22, 5, 75, 65, 80}\nOutput: 87\nTrader earns 87 as the sum of 12, 75\nBuy at 10, sell at 22,\nBuy at 5 and sell at 80\n\nInput: price[] = {2, 30, 15, 10, 8, 25, 80}\nOutput: 100\nTrader earns 100 as the sum of 28 and 72\nBuy at price 2, sell at 30, buy at 8 and sell at 80\n\nInput: price[] = {100, 30, 15, 10, 8, 25, 80};\nOutput: 72\nBuy at price 8 and sell at 80.\n\nInput: price[] = {90, 80, 70, 60, 50}\nOutput: 0\nNot possible to earn.",
    "Given two arrays: a1[0..n-1] of size n and a2[0..m-1] of size m. Task is to check whether a2[] is a subset of a1[] or not. Both the arrays can be sorted or unsorted. There can be duplicate elements.\n\nExample 1:\n\nInput:\na1[] = {11, 7, 1, 13, 21, 3, 7, 3}\na2[] = {11, 3, 7, 1, 7}\nOutput:\nYes\nExplanation:\na2[] is a subset of a1[]\n\nExample 2:\n\nInput:\na1[] = {1, 2, 3, 4, 4, 5, 6}\na2[] = {1, 2, 4}\nOutput:\nYes\nExplanation:\na2[] is a subset of a1[]\n\nExample 3:\n\nInput:\na1[] = {10, 5, 2, 23, 19}\na2[] = {19, 5, 3}\nOutput:\nNo\nExplanation:\na2[] is not a subset of a1[]",
    "Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.\n\nExample 1:\n\nInput:\nn = 6, X = 13\narr[] = [1 4 45 6 10 8]\nOutput:\n1\nExplanation:\nThe triplet {1, 4, 8} in\nthe array sums up to 13.\nExample 2:\n\nInput:\nn = 5, X = 10\narr[] = [1 2 4 3 6]\nOutput:\n1\nExplanation:\nThe triplet {1, 3, 6} in\nthe array sums up to 10.",
    "Given an array arr[] of N non-negative integers representing the height of blocks. If the width of each block is 1, compute how much water can be trapped between the blocks during the rainy season.\n\nExample 1:\n\nInput:\nN = 6\narr[] = {3,0,0,2,0,4}\nOutput:\n10\nExplanation:\n\nExample 2:\n\nInput:\nN = 4\narr[] = {7,4,0,9}\nOutput:\n10\nExplanation:\nWater trapped by the above\nblock of height 4 is 3 units and above\nblock of height 0 is 7 units. So, the\ntotal unit of water trapped is 10 units.\nExample 3:\n\nInput:\nN = 3\narr[] = {6,9,9}\nOutput:\n0\nExplanation:\nNo water will be trapped.",
    "Given an array A[] of positive integers of size N, where each value represents the number of chocolates in a packet. Each packet can have a variable number of chocolates. There are M students, the task is to distribute chocolate packets among M students such that:\n1. Each student gets exactly one packet.\n2. The difference between the maximum number of chocolates given to a student and the minimum number of chocolates given to a student is minimum.\n\nExample 1:\n\nInput:\nN = 8, M = 5\nA = {3, 4, 1, 9, 56, 7, 9, 12}\nOutput: 6\nExplanation: The minimum difference between the maximum chocolates and minimum chocolates is 9 - 3 = 6 by choosing the following M packets: {3, 4, 9, 7, 9}.\nExample 2:\n\nInput:\nN = 7, M = 3\nA = {7, 3, 2, 4, 9, 12, 56}\nOutput: 2\nExplanation: The minimum difference between maximum chocolates and minimum chocolates is 4 - 2 = 2 by choosing the following M packets: {3, 2, 4}.",
    "Given an array of integers (A[]) and a number x, find the smallest subarray with a sum greater than the given value. If such a subarray does not exist, return 0 in that case.\n\nExample 1:\n\nInput:\nA[] = {1, 4, 45, 6, 0, 19}\nx = 51\nOutput: 3\nExplanation:\nMinimum length subarray is {4, 45, 6}\n\nExample 2:\nInput:\nA[] = {1, 10, 5, 2, 7}\nx = 9\nOutput: 1\nExplanation:\nMinimum length subarray is {10}",
    "Given an array of size n and a range [a, b]. The task is to partition the array around the range such that the array is divided into three parts.\n1) All elements smaller than a come first.\n2) All elements in the range a to b come next.\n3) All elements greater than b appear in the end.\nThe individual elements of the three sets can appear in any order. You are required to return the modified array.\n\nNote: The generated output is 1 if you modify the given array successfully.\n\nExample 1:\n\nInput:\nn = 5\nA[] = {1, 2, 3, 3, 4}\n[a, b] = [1, 2]\nOutput: 1\nExplanation: One possible arrangement is:\n{1, 2, 3, 3, 4}. If you return a valid arrangement, the output will be 1.\n\nExample 2:\n\nInput:\nn = 3\nA[] = {1, 2, 3}\n[a, b] = [1, 3]\nOutput: 1\nExplanation: One possible arrangement is: {1, 2, 3}. If you return a valid arrangement, the output will be 1.",
    "Given an array arr of n positive integers and a number k. One can apply a swap operation on the array any number of times, i.e., choose any two indexes i and j (i < j) and swap arr[i], arr[j]. Find the minimum number of swaps required to bring all the numbers less than or equal to k together, i.e., make them a contiguous subarray.\n\nExample 1:\n\nInput:\narr[] = {2, 1, 5, 6, 3}\nK = 3\nOutput: 1\nExplanation: To bring elements 2, 1, 3 together, swap index 2 with 4 (0-based indexing), i.e., element arr[2] = 5 with arr[4] = 3 such that the final array will be- arr[] = {2, 1, 3, 6, 5}.\n\nExample 2:\n\nInput:\narr[] = {2, 7, 9, 5, 8, 7, 4}\nK = 6\nOutput: 2\nExplanation: To bring elements 2, 5, 4 together, swap index 0 with 2 (0-based indexing) and index 4 with 6 (0-based indexing) such that the final array will be- arr[] = {9, 7, 2, 5, 4, 7, 8}.",
    "Given a Integer array A[] of n elements. Your task is to complete the function PalinArray. Which will return 1 if all the elements of the Array are palindrome otherwise it will return 0.\n\nExample 1:\n\nInput:\n5\n111 222 333 444 555\n\nOutput:\n1\n\nExplanation:\nA[0] = 111 //which is a palindrome number.\nA[1] = 222 //which is a palindrome number.\nA[2] = 333 //which is a palindrome number.\nA[3] = 444 //which is a palindrome number.\nA[4] = 555 //which is a palindrome number.\nAs all numbers are palindrome so This will return 1.\n\nExample 2:\n\nInput:\n3\n121 131 20\n\nOutput:\n0\n\nExplanation:\n20 is not a palindrome hence the output is 0.\n\nConstraints:\n1 <=T<= 50\n1 <=n<= 20\n1 <=A[]<= 10000",
    "Given an array arr[] of N integers, calculate the median.\n\nExample 1:\n\nInput: N = 5\narr[] = 90 100 78 89 67\nOutput: 89\nExplanation: After sorting the array, the middle element is the median.\n\nExample 2:\n\nInput: N = 4\narr[] = 56 67 30 79\nOutput: 61\nExplanation: In case of an even number of elements, the average of two middle elements is the median.\n\nExpected Time Complexity: O(n * log(n))\nExpected Space Complexity: O(1)\n\nConstraints:\n1 <= Length of Array <= 100\n1 <= Elements of Array <= 100",
    "Given two sorted arrays, a[] and b[], the task is to find the median of these sorted arrays, where N is the number of elements in the first array, and M is the number of elements in the second array. \n\nThis is an extension of Median of two sorted arrays of equal size problem. Here we handle arrays of unequal size also.\n\nExamples: \n\nInput: a[] = {-5, 3, 6, 12, 15}, b[] = {-12, -10, -6, -3, 4, 10}\nOutput: The median is 3.\nExplanation: The merged array is: ar3[] = {-12, -10, -6, -5 , -3, 3, 4, 6, 10, 12, 15}.\nSo the median of the merged array is 3\n\nInput: a[] = {2, 3, 5, 8}, b[] = {10, 12, 14, 16, 18, 20}\nOutput: The median is 11.\nExplanation : The merged array is: ar3[] = {2, 3, 5, 8, 10, 12, 14, 16, 18, 20}\nIf the number of the elements are even. So there are two middle elements.\nTake the average between the two: (10 + 12) / 2 = 11.",
]
export default dsaQuestionsArray;